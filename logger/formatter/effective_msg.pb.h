// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: effective_msg.proto
// Protobuf C++ Version: 5.29.3

#ifndef effective_5fmsg_2eproto_2epb_2eh
#define effective_5fmsg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_effective_5fmsg_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_effective_5fmsg_2eproto {
  static const ::uint32_t offsets[];
};
class EffectiveMsg;
struct EffectiveMsgDefaultTypeInternal;
extern EffectiveMsgDefaultTypeInternal _EffectiveMsg_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class EffectiveMsg final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:EffectiveMsg) */ {
 public:
  inline EffectiveMsg() : EffectiveMsg(nullptr) {}
  ~EffectiveMsg() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EffectiveMsg* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EffectiveMsg));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EffectiveMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline EffectiveMsg(const EffectiveMsg& from) : EffectiveMsg(nullptr, from) {}
  inline EffectiveMsg(EffectiveMsg&& from) noexcept
      : EffectiveMsg(nullptr, std::move(from)) {}
  inline EffectiveMsg& operator=(const EffectiveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectiveMsg& operator=(EffectiveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EffectiveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EffectiveMsg* internal_default_instance() {
    return reinterpret_cast<const EffectiveMsg*>(
        &_EffectiveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EffectiveMsg& a, EffectiveMsg& b) { a.Swap(&b); }
  inline void Swap(EffectiveMsg* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectiveMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EffectiveMsg* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<EffectiveMsg>(arena);
  }
  void CopyFrom(const EffectiveMsg& from);
  void MergeFrom(const EffectiveMsg& from) { EffectiveMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EffectiveMsg* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "EffectiveMsg"; }

 protected:
  explicit EffectiveMsg(::google::protobuf::Arena* arena);
  EffectiveMsg(::google::protobuf::Arena* arena, const EffectiveMsg& from);
  EffectiveMsg(::google::protobuf::Arena* arena, EffectiveMsg&& from) noexcept
      : EffectiveMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<13> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFullNameFieldNumber = 6,
    kFuncNameFieldNumber = 7,
    kLogInfoFieldNumber = 8,
    kTimestampFieldNumber = 2,
    kLevelFieldNumber = 1,
    kPidFieldNumber = 3,
    kTipFieldNumber = 4,
    kLineFieldNumber = 5,
  };
  // string full_name = 6;
  void clear_full_name() ;
  const std::string& full_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* value);

  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(
      const std::string& value);
  std::string* _internal_mutable_full_name();

  public:
  // string func_name = 7;
  void clear_func_name() ;
  const std::string& func_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_func_name(Arg_&& arg, Args_... args);
  std::string* mutable_func_name();
  PROTOBUF_NODISCARD std::string* release_func_name();
  void set_allocated_func_name(std::string* value);

  private:
  const std::string& _internal_func_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_name(
      const std::string& value);
  std::string* _internal_mutable_func_name();

  public:
  // string log_info = 8;
  void clear_log_info() ;
  const std::string& log_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_info(Arg_&& arg, Args_... args);
  std::string* mutable_log_info();
  PROTOBUF_NODISCARD std::string* release_log_info();
  void set_allocated_log_info(std::string* value);

  private:
  const std::string& _internal_log_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_info(
      const std::string& value);
  std::string* _internal_mutable_log_info();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 level = 1;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // int32 pid = 3;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // int32 tip = 4;
  void clear_tip() ;
  ::int32_t tip() const;
  void set_tip(::int32_t value);

  private:
  ::int32_t _internal_tip() const;
  void _internal_set_tip(::int32_t value);

  public:
  // int32 line = 5;
  void clear_line() ;
  ::int32_t line() const;
  void set_line(::int32_t value);

  private:
  ::int32_t _internal_line() const;
  void _internal_set_line(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EffectiveMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EffectiveMsg& from_msg);
    ::google::protobuf::internal::ArenaStringPtr full_name_;
    ::google::protobuf::internal::ArenaStringPtr func_name_;
    ::google::protobuf::internal::ArenaStringPtr log_info_;
    ::int64_t timestamp_;
    ::int32_t level_;
    ::int32_t pid_;
    ::int32_t tip_;
    ::int32_t line_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_effective_5fmsg_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EffectiveMsg

// int32 level = 1;
inline void EffectiveMsg::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::int32_t EffectiveMsg::level() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.level)
  return _internal_level();
}
inline void EffectiveMsg::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.level)
}
inline ::int32_t EffectiveMsg::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void EffectiveMsg::_internal_set_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// int64 timestamp = 2;
inline void EffectiveMsg::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t EffectiveMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.timestamp)
  return _internal_timestamp();
}
inline void EffectiveMsg::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.timestamp)
}
inline ::int64_t EffectiveMsg::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void EffectiveMsg::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// int32 pid = 3;
inline void EffectiveMsg::clear_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = 0;
}
inline ::int32_t EffectiveMsg::pid() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.pid)
  return _internal_pid();
}
inline void EffectiveMsg::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.pid)
}
inline ::int32_t EffectiveMsg::_internal_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pid_;
}
inline void EffectiveMsg::_internal_set_pid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = value;
}

// int32 tip = 4;
inline void EffectiveMsg::clear_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tip_ = 0;
}
inline ::int32_t EffectiveMsg::tip() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.tip)
  return _internal_tip();
}
inline void EffectiveMsg::set_tip(::int32_t value) {
  _internal_set_tip(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.tip)
}
inline ::int32_t EffectiveMsg::_internal_tip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tip_;
}
inline void EffectiveMsg::_internal_set_tip(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tip_ = value;
}

// int32 line = 5;
inline void EffectiveMsg::clear_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_ = 0;
}
inline ::int32_t EffectiveMsg::line() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.line)
  return _internal_line();
}
inline void EffectiveMsg::set_line(::int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.line)
}
inline ::int32_t EffectiveMsg::_internal_line() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.line_;
}
inline void EffectiveMsg::_internal_set_line(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_ = value;
}

// string full_name = 6;
inline void EffectiveMsg::clear_full_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_name_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::full_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EffectiveMsg.full_name)
  return _internal_full_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EffectiveMsg::set_full_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EffectiveMsg.full_name)
}
inline std::string* EffectiveMsg::mutable_full_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.full_name)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_full_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.full_name_.Get();
}
inline void EffectiveMsg::_internal_set_full_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_name_.Set(value, GetArena());
}
inline std::string* EffectiveMsg::_internal_mutable_full_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.full_name_.Mutable( GetArena());
}
inline std::string* EffectiveMsg::release_full_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:EffectiveMsg.full_name)
  return _impl_.full_name_.Release();
}
inline void EffectiveMsg::set_allocated_full_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.full_name)
}

// string func_name = 7;
inline void EffectiveMsg::clear_func_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.func_name_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::func_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EffectiveMsg.func_name)
  return _internal_func_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EffectiveMsg::set_func_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.func_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EffectiveMsg.func_name)
}
inline std::string* EffectiveMsg::mutable_func_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_func_name();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.func_name)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_func_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.func_name_.Get();
}
inline void EffectiveMsg::_internal_set_func_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.func_name_.Set(value, GetArena());
}
inline std::string* EffectiveMsg::_internal_mutable_func_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.func_name_.Mutable( GetArena());
}
inline std::string* EffectiveMsg::release_func_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:EffectiveMsg.func_name)
  return _impl_.func_name_.Release();
}
inline void EffectiveMsg::set_allocated_func_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.func_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.func_name_.IsDefault()) {
    _impl_.func_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.func_name)
}

// string log_info = 8;
inline void EffectiveMsg::clear_log_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_info_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::log_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EffectiveMsg.log_info)
  return _internal_log_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EffectiveMsg::set_log_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EffectiveMsg.log_info)
}
inline std::string* EffectiveMsg::mutable_log_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_info();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.log_info)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_log_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_info_.Get();
}
inline void EffectiveMsg::_internal_set_log_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_info_.Set(value, GetArena());
}
inline std::string* EffectiveMsg::_internal_mutable_log_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_info_.Mutable( GetArena());
}
inline std::string* EffectiveMsg::release_log_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:EffectiveMsg.log_info)
  return _impl_.log_info_.Release();
}
inline void EffectiveMsg::set_allocated_log_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_info_.IsDefault()) {
    _impl_.log_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.log_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // effective_5fmsg_2eproto_2epb_2eh
