# 最低CMake版本要求
cmake_minimum_required(VERSION 3.15)

# 定义测试目标名称
project(logger_encrypt_test)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 仅编译 encrypt 模块的最小依赖
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(UTIL_SRCS ../../../utils/sys_util_linux.cc ../../../utils/file_util.cc)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(UTIL_SRCS ../../../utils/sys_util_win.cc ../../../utils/file_util.cc)
else()
    message(FATAL_ERROR "unsupported.")
endif()

set(ENCRYPT_SRCS ../../../encrypt/encrypt.cc ../../../encrypt/aes_encrypt.cc)

# 配置第三方库路径（关键步骤）
get_filename_component(PROJECT_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/../../.." ABSOLUTE)

# 1. 设置第三方库的头文件目录（include路径）
set(THIRD_PARTY_INCLUDE_DIR "${PROJECT_ROOT_DIR}/third_party/x64-linux/include")

# 仅进行单元测试，不依赖第三方库
find_package(OpenSSL REQUIRED)
find_package(fmt REQUIRED)
# 添加测试源文件
add_executable(encrypt_test
    encrypt_test.cc
    ${ENCRYPT_SRCS}
    ${UTIL_SRCS}
)

# 包含头文件目录
target_include_directories(encrypt_test PRIVATE
    ${PROJECT_ROOT_DIR}
)
target_link_libraries(encrypt_test PRIVATE
    fmt::fmt
    OpenSSL::SSL
    OpenSSL::Crypto
)

# 启用并注册测试
enable_testing()
add_test(NAME encrypt_test COMMAND encrypt_test)

